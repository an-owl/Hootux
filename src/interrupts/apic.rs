use x86_msr::Msr;
use apic_structures::registers::ApicError;
use crate::interrupts::apic::apic_structures::apic_types::TimerMode;

pub mod xapic;
pub mod apic_structures;

/// Trait for control over the Local Advanced Programmable Interrupt Controller
///
/// #LVT Entry
/// These registers contain interrupt configuration information. All registers contain an 8bit
/// vector and a mask bit. The vector may not be less than 16, however it should not be lower than 32
/// because vectors 0..32 are used for exception handling and may cause unwanted behaviour.
/// When set the mask bit will prevent an interrupt from being generated by the interrupt controller
pub trait Apic: crate::time::Timer {

    unsafe fn set_enable(&mut self, enable: bool);

    unsafe fn init_err(&mut self, vector: u8, mask: bool);

    unsafe fn init_timer(&mut self, vector: u8, mask: bool);

    unsafe fn set_timer(&mut self, mode: TimerMode, time: u32);

    /// Declares that the current interrupt has been handled.
    /// this should be the last thing called before the end of an interrupt handler.
    fn declare_eoi(&mut self);

    /// Gets the current error and clears the error register.
    fn get_err(&self) -> ApicError;
}

//fn get_timer_speed() ->